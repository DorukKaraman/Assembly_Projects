ORG 0
	ACALL CONFIGURE_LCD
KEYBOARD_LOOP:
    ACALL KEYBOARD
    MOV R2, A
    ACALL SEND_DATA
    ACALL KEYBOARD
    MOV R3, A
    ACALL SEND_DATA
    ACALL KEYBOARD
    MOV R0, A
    ACALL SEND_DATA
    ACALL KEYBOARD
    MOV R4, A
    ACALL SEND_DATA
    ACALL KEYBOARD
    MOV R5, A
    ACALL SEND_DATA
    ACALL KEYBOARD
    MOV R1, A
    ACALL SEND_DATA
ASCIITOHEX: ;THE NUMBERS ARE AS ASCII SO I NEED TO CONVERT THEM TO HEXA (INPUT 1 IS 31 HEXA BUT I WANT IT TO BE 1)
	MOV B,#30
	MOV A, R2
	SUBB A, B
	MOV R2, A
	MOV B,#30
	MOV A, R3
	SUBB A, B
	MOV R3, A
	MOV B,#30
	MOV A, R4
	SUBB A, B
	MOV R4, A
	MOV B,#30
	MOV A, R5
	SUBB A, B
	MOV R5, A
TIMER: MOV TMOD, #02H
	MOV A, R0
	CJNE A, 'A', LFF
	LJMP FIRSTFREQ
LFF:	ljmp SECFREQ ;A IS 41 IN ASCII
SECFREQ:
	CJNE R5, #0, SECLEFTMOST5
	CJNE R4, #2, SEC10
;FREQUENCY IS 20
	MOV A, #5H ;1000/F
	MOV B, R2
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #50D
	SUBB A, R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R4
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505SEC20:JNB TF0,BACKTO505SEC20
	CLR TF0
	CPL P2.5
	MOV A, R4
	XCH A,R7
	MOV R4, A
	MOV TL0, A
	MOV TH0, R7
	SJMP BACKTO505SEC20
SEC10:;FREQ IS 10
	MOV A, #10H ;1000/F
	MOV B, R2
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #100D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R4
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505SEC10:JNB TF0,BACKTO505SEC10
	CLR TF0
	CPL P2.5
	MOV A, R4
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505SEC10
SECLEFTMOST5:
	CJNE R4, #0, SEC15
;FREQUENCY IS 5
	MOV A, #20H ;1000/F
	MOV B, R2
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #200D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R4
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505SEC5:JNB TF0,BACKTO505SEC5
	CLR TF0
	CPL P2.5
	MOV A, R4
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505SEC5
SEC15:;FREQ IS 15
	MOV A, #7H ;1000/F
	MOV B, R2
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #70D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R4
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505SEC15:JNB TF0,BACKTO505SEC15
	CLR TF0
	CPL P2.5
	MOV A, R4
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505SEC15
FIRSTFREQ:
	CJNE R3, #0, FIRLEFTMOST5
	CJNE R2, #2, FIR10
;FREQUENCY IS 20
	MOV A, #5H ;1000/F
	MOV B, R4
	MUL AB
	MOV R6, A
	MOV A, #0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #50D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R2
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505FIR20:JNB TF0,BACKTO505FIR20
	CLR TF0
	CPL P2.5
	MOV A, R2
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505FIR20
FIR10:;FREQ IS 10
	MOV A, #10H ;1000/F
	MOV B, R4
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #100D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R2
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505FIR10:JNB TF0,BACKTO505FIR10
	CLR TF0
	CPL P2.5
	MOV A, R2
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505FIR10
FIRLEFTMOST5:
	CJNE R2, #0, FIR15
;FREQUENCY IS 5
	MOV A, #20H ;1000/F
	MOV B, R4
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #200D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R2
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505FIR5:JNB TF0,BACKTO505FIR5
	CLR TF0
	CPL P2.5
	MOV A, R2
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505FIR5
FIR15:;FREQ IS 15
	MOV A, #7H ;1000/F
	MOV B, R4
	MUL AB
	MOV R6, A
	MOV A,#0FFH
	CLR C
	SUBB A, R6
	MOV R7, A
	MOV A, #70D
	SUBB A,R6
	MOV R6, A
	MOV A, #0FFh
	SUBB A,R6
	MOV R4, A
	MOV TH0,R2
	MOV TL0,R7
	CLR TF0
	SETB TR0
	SETB P2.5
BACKTO505FIR15:JNB TF0,BACKTO505FIR15
	CLR TF0
	CPL P2.5
	MOV A, R2
	XCH A,R7
	MOV R4, A
	MOV TH0, A
	MOV TL0, R7
	SJMP BACKTO505FIR15
;MY CODE ENDS HERE
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret
SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret
SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret
DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret
KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_FIND
	inc	DPL
	inc	DPL
	inc	DPL
	inc	DPL
	movc	A, @A+DPTR
	mov P2, #0ffh
	ret
KCODE0:
	DB	'1', '2', '3', '+'
KCODE1:
	DB	'4', '5', '6', '-'
KCODE2:
	DB	'7', '8', '9', '*'
KCODE3:
	DB	'A', '0', '#', 'B'